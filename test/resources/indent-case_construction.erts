Name: Nominal

=-=
abstract project Colors is
   type Value_Type is ("Red", "Green", "Blue");
   X : Value_Type := "Red";
   Shift : Value_Type := "Green";

   case X is
      -- Shift colors
      when "Red" =>
         -- Shift to green
         Shift := "Green";
      when "Green" =>
         -- Shift to blue
         Shift := "Blue";
      when "Blue" =>
         -- Shift to red
         Shift := "Red";
   end case;
end Colors;
=-=-=

Code:
  (lambda ()
    (indent-transform
      (lambda ()
        (setq-local gpr-ts-mode-indent-offset 8)
        (setq-local gpr-ts-mode-indent-when-offset 3))))

Name: Modified indent offset

=-=
abstract project Colors is
        type Value_Type is ("Red", "Green", "Blue");
        X : Value_Type := "Red";
        Shift : Value_Type := "Green";

        case X is
           -- Shift colors
           when "Red" =>
                   -- Shift to green
                   Shift := "Green";
           when "Green" =>
                   -- Shift to blue
                   Shift := "Blue";
           when "Blue" =>
                   -- Shift to red
                   Shift := "Red";
        end case;
end Colors;
=-=-=

Code:
  (lambda ()
    (indent-transform
      (lambda () (setq-local gpr-ts-mode-indent-when-offset 0))))

Name: Modified "when" indent offset

=-=
abstract project Colors is
   type Value_Type is ("Red", "Green", "Blue");
   X : Value_Type := "Red";
   Shift : Value_Type := "Green";

   case X is
   -- Shift colors
   when "Red" =>
      -- Shift to green
      Shift := "Green";
   when "Green" =>
      -- Shift to blue
      Shift := "Blue";
   when "Blue" =>
      -- Shift to red
      Shift := "Red";
   end case;
end Colors;
=-=-=

Code: indent-transform

Name: Nominal "broken" indent offset

=-=
abstract project Colors is
   type Value_Type is ("Red", "Green", "Blue");
   X : Value_Type := "Red";
   Shift : Value_Type := "Green";

   case
     X
   is
      -- Shift colors
      when "Red" =>
         -- Shift to green
         Shift := "Green";
      when "Green" =>
         -- Shift to blue
         Shift := "Blue";
      when "Blue" =>
         -- Shift to red
         Shift := "Red";
   end case;
end Colors;
=-=-=

Code:
  (lambda ()
    (indent-transform
      (lambda () (setq-local gpr-ts-mode-indent-broken-offset 8))))

Name: Modified "broken" indent offset

=-=
abstract project Colors is
   type Value_Type is ("Red", "Green", "Blue");
   X : Value_Type := "Red";
   Shift : Value_Type := "Green";

   case
           X
   is
      -- Shift colors
      when "Red" =>
         -- Shift to green
         Shift := "Green";
      when "Green" =>
         -- Shift to blue
         Shift := "Blue";
      when "Blue" =>
         -- Shift to red
         Shift := "Red";
   end case;
end Colors;
=-=-=

Code: indent-transform

Name: Stacked discrete_choice_list

=-=
abstract project Colors is
   type Value_Type is ("Red", "Green", "Blue");
   X : Value_Type := "Red";
   Shift : Value_Type := "Green";

   case X is
      -- Shift colors
      when "Red"   |
           "Green" |
           "Blue"  =>
         -- Use blue
         Shift := "Blue";
      when others =>
         -- Use red
         Shift := "Red";
   end case;
end Colors;
=-=-=
